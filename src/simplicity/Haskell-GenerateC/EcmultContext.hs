module Main where

import Data.Char (toUpper)
import Data.List (intercalate, unfoldr)
import Data.Tuple (swap)
import Simplicity.LibSecp256k1.Spec

showFE :: FE -> String
showFE = intercalate "," . map show32 . reverse . take 8 . unfoldr (Just . swap . (`divMod` (2^32))) . fe_repr
 where
  show32 x = show x ++ "u"

showGE :: GE -> String
showGE (GE x y) = showFE x ++ "," ++ showFE y

showsEntry :: GE -> ShowS
showsEntry g = showString "S(" . showString (showGE g) . showString ")"

showTable :: (Functor t, Foldable t) => String -> t GE -> [String]
showTable nm t = ["static const secp256k1_ge_storage " ++ nm ++ "[ECMULT_TABLE_SIZE(WINDOW_G)]={"
                 , foldr1 (\x y -> x . showString ",\n" . y) (fmap showsEntry t) "};"
                 ]

name = "ecmult_pre_g"
filename = name ++ ".h"
headerGuard = "SECP256K1_" ++ map toUpper name ++ "_H"

header :: [String]
header = [ "/* This file has been generated by EcmultContext.hs  */"
         , "#ifndef " ++ headerGuard
         , "#define " ++ headerGuard
         , "#include \"ecmult.h\""
         , "#ifdef S"
         , "#error macro identifier S already in use."
         , "#endif"
         , "#define S SECP256K1_GE_STORAGE_CONST"
         , ""
         ]

footer :: [String]
footer = [ "#undef S"
         , "#endif"
         ]

main = writeFile filename (unlines body)
 where
  body = header
      ++ showTable "secp256k1_pre_g" tableG
      ++ showTable "secp256k1_pre_g_128" tableG128
      ++ footer
